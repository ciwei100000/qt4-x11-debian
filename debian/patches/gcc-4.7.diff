Author: Pino Toscano <pino@debian.org>
Description: Fix build failures with GCC 4.7
 Fix build issues with GCC 4.7, like code wrongly mistaken for operator"".
Origin: vendor
Forwarded: no
Last-Update: 2012-04-17

--- a/src/testlib/qxmltestlogger.cpp
+++ b/src/testlib/qxmltestlogger.cpp
@@ -119,7 +119,7 @@
     QTest::qt_asprintf(&buf,
             "<Environment>\n"
             "    <QtVersion>%s</QtVersion>\n"
-            "    <QTestVersion>"QTEST_VERSION_STR"</QTestVersion>\n"
+            "    <QTestVersion>" QTEST_VERSION_STR "</QTestVersion>\n"
             "</Environment>\n", qVersion());
     outputString(buf.constData());
 }
--- a/src/3rdparty/javascriptcore/JavaScriptCore/runtime/JSGlobalObject.h
+++ b/src/3rdparty/javascriptcore/JavaScriptCore/runtime/JSGlobalObject.h
@@ -57,9 +57,7 @@
     
     class JSGlobalObject : public JSVariableObject {
     protected:
-        using JSVariableObject::JSVariableObjectData;
-
-        struct JSGlobalObjectData : public JSVariableObjectData {
+        struct JSGlobalObjectData : public JSVariableObject::JSVariableObjectData {
             // We use an explicit destructor function pointer instead of a
             // virtual destructor because we want to avoid adding a vtable
             // pointer to this struct. Adding a vtable pointer would force the
--- a/src/3rdparty/javascriptcore/JavaScriptCore/runtime/JSStaticScopeObject.h
+++ b/src/3rdparty/javascriptcore/JavaScriptCore/runtime/JSStaticScopeObject.h
@@ -32,8 +32,7 @@
     
     class JSStaticScopeObject : public JSVariableObject {
     protected:
-        using JSVariableObject::JSVariableObjectData;
-        struct JSStaticScopeObjectData : public JSVariableObjectData {
+        struct JSStaticScopeObjectData : public JSVariableObject::JSVariableObjectData {
             JSStaticScopeObjectData()
                 : JSVariableObjectData(&symbolTable, &registerStore + 1)
             {
--- a/src/corelib/kernel/qobjectdefs.h
+++ b/src/corelib/kernel/qobjectdefs.h
@@ -216,7 +216,7 @@
 #define QTOSTRING_HELPER(s) #s
 #define QTOSTRING(s) QTOSTRING_HELPER(s)
 #ifndef QT_NO_DEBUG
-# define QLOCATION "\0"__FILE__":"QTOSTRING(__LINE__)
+# define QLOCATION "\0" __FILE__ ":" QTOSTRING(__LINE__)
 # define METHOD(a)   qFlagLocation("0"#a QLOCATION)
 # define SLOT(a)     qFlagLocation("1"#a QLOCATION)
 # define SIGNAL(a)   qFlagLocation("2"#a QLOCATION)
--- a/src/corelib/plugin/qplugin.h
+++ b/src/corelib/plugin/qplugin.h
@@ -112,9 +112,9 @@
 #  define Q_PLUGIN_VERIFICATION_DATA \
     static const char qt_plugin_verification_data[] = \
       "pattern=""QT_PLUGIN_VERIFICATION_DATA""\n" \
-      "version="QT_VERSION_STR"\n" \
-      "debug="QPLUGIN_DEBUG_STR"\n" \
-      "buildkey="QT_BUILD_KEY;
+      "version=" QT_VERSION_STR "\n" \
+      "debug=" QPLUGIN_DEBUG_STR "\n" \
+      "buildkey=" QT_BUILD_KEY;
 
 #  if defined (Q_OS_WIN32) && defined(Q_CC_BOR)
 #     define Q_STANDARD_CALL __stdcall

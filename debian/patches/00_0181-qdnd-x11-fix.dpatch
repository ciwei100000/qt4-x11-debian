#! /bin/sh /usr/share/dpatch/dpatch-run
## 00_0181-qdnd-x11-fix.diff.dpatch by Matthias Kretz <kretz@kde.org>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: qt-bugs issue : 166518
## Trolltech task ID : 167509
## DP: This patch makes the algorithm look at _all_ widgets that contain the QPoint.

@DPATCH@
diff -urNad qt4-x11-4.3.0~/src/gui/kernel/qdnd_x11.cpp qt4-x11-4.3.0/src/gui/kernel/qdnd_x11.cpp
--- qt4-x11-4.3.0~/src/gui/kernel/qdnd_x11.cpp	2007-05-25 15:24:19.000000000 +0200
+++ qt4-x11-4.3.0/src/gui/kernel/qdnd_x11.cpp	2007-06-26 20:05:15.000000000 +0200
@@ -42,6 +42,7 @@
 #include "qdebug.h"
 #include "qimagewriter.h"
 #include "qbuffer.h"
+#include "qstack.h"
 
 #include "qdnd_p.h"
 #include "qt_x11_p.h"
@@ -668,7 +669,44 @@
 }
 
 
-static QWidget *find_child(QWidget *tlw, QPoint & p)
+static QWidget *find_next_child(QWidget *child, QPoint &p, QStack<int> &chosenLine)
+{
+    p = child->mapToParent(p);
+    QWidget *widget = child->parentWidget();
+    if (!widget) {
+        return widget;
+    }
+
+    bool done = false;
+    bool backwards = true;
+    while (!done) {
+        done = true;
+        if (((QExtraWidget*)widget)->extraData() &&
+             ((QExtraWidget*)widget)->extraData()->xDndProxy != 0)
+            break; // stop searching for widgets under the mouse cursor if found widget is a proxy.
+        QObjectList children = widget->children();
+        if (!chosenLine.isEmpty() && !children.isEmpty()) {
+            for(int i = backwards ? chosenLine.pop() : children.size(); i > 0;) {
+                --i;
+                QWidget *w = qobject_cast<QWidget *>(children.at(i));
+                if (!w)
+                    continue;
+                if (w->isVisible() &&
+                     w->geometry().contains(p) &&
+                     !w->isWindow()) {
+                    widget = w;
+                    done = false;
+                    backwards = false;
+                    p = widget->mapFromParent(p);
+                    chosenLine << i;
+                    break;
+                }
+            }
+        }
+    }
+    return widget;
+}
+static QWidget *find_child(QWidget *tlw, QPoint & p, QStack<int> &chosenLine)
 {
     QWidget *widget = tlw;
 
@@ -692,6 +730,7 @@
                     widget = w;
                     done = false;
                     p = widget->mapFromParent(p);
+                    chosenLine.push(i);
                     break;
                 }
             }
@@ -780,7 +819,8 @@
     const unsigned long *l = (const unsigned long *)xe->xclient.data.l;
 
     QPoint p((l[2] & 0xffff0000) >> 16, l[2] & 0x0000ffff);
-    QWidget * c = find_child(w, p); // changes p to to c-local coordinates
+    QStack<int> chosenLine;
+    QWidget * c = find_child(w, p, chosenLine); // changes p to to c-local coordinates
 
     if (!passive && checkEmbedded(c, xe))
         return;
@@ -814,8 +854,7 @@
 
     if (!passive) { // otherwise just reject
         while (c && !c->acceptDrops() && !c->isWindow()) {
-            p = c->mapToParent(p);
-            c = c->parentWidget();
+            c = find_next_child(c, p, chosenLine);
         }
         QWidget *target_widget = c && c->acceptDrops() ? c : 0;
 

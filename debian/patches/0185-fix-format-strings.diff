qt-bugs@ issue : N171087
Trolltech task ID : 173777
bugs.kde.org number :
applied: no
author: Dirk Mueller <mueller@kde.org>

This patch fixes various code issues with handling format strings
None of them seem to be exceptionally bad, but its better safe
than sorry.

--- qt4-x11-4.3.2.orig/src/corelib/global/qglobal.h
+++ qt4-x11-4.3.2/src/corelib/global/qglobal.h
@@ -1276,8 +1276,16 @@
 #ifdef QT3_SUPPORT
 Q_CORE_EXPORT QT3_SUPPORT void qSystemWarning(const char *msg, int code = -1);
 #endif /* QT3_SUPPORT */
-Q_CORE_EXPORT void qErrnoWarning(int code, const char *msg, ...);
-Q_CORE_EXPORT void qErrnoWarning(const char *msg, ...);
+Q_CORE_EXPORT void qErrnoWarning(int code, const char *msg, ...)
+#if defined(Q_CC_GNU) && !defined(__INSURE__)
+    __attribute__ ((format (printf, 2, 3)))
+#endif
+    ;
+Q_CORE_EXPORT void qErrnoWarning(const char *msg, ...)
+#if defined(Q_CC_GNU) && !defined(__INSURE__)
+    __attribute__ ((format (printf, 1, 2)))
+#endif
+    ;
 
 #if (defined(QT_NO_DEBUG_OUTPUT) || defined(QT_NO_TEXTSTREAM)) && !defined(QT_NO_DEBUG_STREAM)
 #define QT_NO_DEBUG_STREAM
--- qt4-x11-4.3.2.orig/src/corelib/tools/qbytearray.h
+++ qt4-x11-4.3.2/src/corelib/tools/qbytearray.h
@@ -86,8 +86,16 @@
 Q_CORE_EXPORT int qstrnicmp(const char *, const char *, uint len);
 
 // implemented in qvsnprintf.cpp
-Q_CORE_EXPORT int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap);
-Q_CORE_EXPORT int qsnprintf(char *str, size_t n, const char *fmt, ...);
+Q_CORE_EXPORT int qvsnprintf(char *str, size_t n, const char *fmt, va_list ap)
+#if defined(Q_CC_GNU) && !defined(__INSURE__)
+        __attribute__ ((format (printf, 3, 0)))
+#endif
+    ;
+Q_CORE_EXPORT int qsnprintf(char *str, size_t n, const char *fmt, ...)
+#if defined(Q_CC_GNU) && !defined(__INSURE__)
+        __attribute__ ((format (printf, 3, 4)))
+#endif
+    ;
 
 #ifdef QT3_SUPPORT
 inline QT3_SUPPORT void *qmemmove(void *dst, const void *src, uint len)
--- qt4-x11-4.3.2.orig/src/gui/painting/qprintengine_pdf_p.h
+++ qt4-x11-4.3.2/src/gui/painting/qprintengine_pdf_p.h
@@ -163,7 +163,11 @@
     void writePage();
 
     int addXrefEntry(int object, bool printostr = true);
-    void xprintf(const char* fmt, ...);
+    void xprintf(const char* fmt, ...)
+#if defined(Q_CC_GNU) && !defined(__INSURE__)
+        __attribute__ ((format (printf, 2, 3)))
+#endif
+        ;
     inline void write(const QByteArray &data) {
         stream->writeRawData(data.constData(), data.size());
         streampos += data.size();
--- qt4-x11-4.3.2.orig/src/qt3support/tools/q3cstring.h
+++ qt4-x11-4.3.2/src/qt3support/tools/q3cstring.h
@@ -72,7 +72,11 @@
     }
 
     Q3CString        copy()        const { return *this; }
-    Q3CString    &sprintf(const char *format, ...);
+    Q3CString    &sprintf(const char *format, ...)
+#if defined(Q_CC_GNU) && !defined(__INSURE__)
+        __attribute__ ((format (printf, 2, 3)))
+#endif
+        ;
 
     Q3CString        left(uint len)  const { return QByteArray::left(len); }
     Q3CString        right(uint len) const { return QByteArray::right(len); }
--- qt4-x11-4.3.2.orig/tools/linguist/shared/profileevaluator.h
+++ qt4-x11-4.3.2/tools/linguist/shared/profileevaluator.h
@@ -103,7 +103,11 @@
 
 private:
     void logMessage(const QString &msg, MessageType mt = MT_DebugLevel2);
-    void logMessage(MessageType mt, const char *msg, ...);
+    void logMessage(MessageType mt, const char *msg, ...)
+#if defined(Q_CC_GNU) && !defined(__INSURE__)
+        __attribute__ ((format (printf, 3, 4)))
+#endif
+        ;
     QString expandVariableReferences(const QString &value);
     QString evaluateExpandFunction(const QByteArray &func, const QString &arguments);
 
--- qt4-x11-4.3.2.orig/tools/qtestlib/src/qtest_global.h
+++ qt4-x11-4.3.2/tools/qtestlib/src/qtest_global.h
@@ -74,7 +74,11 @@
     enum SkipMode { SkipSingle = 1, SkipAll = 2 };
     enum TestFailMode { Abort = 1, Continue = 2 };
 
-    int Q_TESTLIB_EXPORT qt_snprintf(char *str, int size, const char *format, ...);
+    int Q_TESTLIB_EXPORT qt_snprintf(char *str, int size, const char *format, ...)
+#if defined(Q_CC_GNU) && !defined(__INSURE__)
+        __attribute__ ((format (printf, 3, 4)))
+#endif
+        ;
 }
 
 QT_END_HEADER

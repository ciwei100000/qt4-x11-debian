commit 4d38013cfc3058e36de1b6a6c20653ef2688a92b
Author: Samuel RÃ¸dal <samuel.rodal@nokia.com>
Date:   Tue Feb 1 17:57:10 2011 +0100

    Fixed missing text when using static text items in GL 2 engine.
    
    When the context is destroyed and recreated, we end up with a new glyph
    cache, but we only recreate the vertex arrays for the very first static
    text item. We need to keep track of the glyph cache in each text item,
    so that we can recreate the vertex arrays and re-populate the cache
    accordingly. As the pointer might be the same after the glyph cache is
    recreated, we need to use serial numbers instead.
    
    We also need to re-create the cache when the context pointer has been
    invalidated, so that the static text items also get invalidated, and
    the texture glyph cache gets repopulated.
    
    Reviewed-by: Eskil Abrahamsen Blomfeldt

---
 src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp |   13 ++++++++-----
 src/opengl/gl2paintengineex/qtextureglyphcache_gl.cpp  |    3 +++
 src/opengl/gl2paintengineex/qtextureglyphcache_gl_p.h  |    3 +++
 3 files changed, 14 insertions(+), 5 deletions(-)

--- a/src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp
+++ b/src/opengl/gl2paintengineex/qpaintengineex_opengl2.cpp
@@ -1489,7 +1489,7 @@ namespace {
     {
     public:
         QOpenGLStaticTextUserData()
-            : QStaticTextUserData(OpenGLUserData), cacheSize(0, 0)
+            : QStaticTextUserData(OpenGLUserData), cacheSize(0, 0), cacheSerialNumber(0)
         {
         }
 
@@ -1501,6 +1501,7 @@ namespace {
         QGL2PEXVertexArray vertexCoordinateArray;
         QGL2PEXVertexArray textureCoordinateArray;
         QFontEngineGlyphCache::Type glyphType;
+        int cacheSerialNumber;
     };
 
 }
@@ -1518,12 +1519,10 @@ void QGL2PaintEngineExPrivate::drawCache
 
     QGLTextureGlyphCache *cache =
         (QGLTextureGlyphCache *) staticTextItem->fontEngine()->glyphCache(ctx, glyphType, QTransform());
-    if (!cache || cache->cacheType() != glyphType) {
+    if (!cache || cache->cacheType() != glyphType || cache->context() == 0) {
         cache = new QGLTextureGlyphCache(ctx, glyphType, QTransform());
         staticTextItem->fontEngine()->setGlyphCache(ctx, cache);
         recreateVertexArrays = true;
-    } else if (cache->context() == 0) { // Old context has been destroyed, new context has same ptr value
-        cache->setContext(ctx);
     }
 
     if (staticTextItem->userDataNeedsUpdate) {
@@ -1534,8 +1533,11 @@ void QGL2PaintEngineExPrivate::drawCache
         recreateVertexArrays = true;
     } else {
         QOpenGLStaticTextUserData *userData = static_cast<QOpenGLStaticTextUserData *>(staticTextItem->userData());
-        if (userData->glyphType != glyphType)
+        if (userData->glyphType != glyphType) {
             recreateVertexArrays = true;
+        } else if (userData->cacheSerialNumber != cache->serialNumber()) {
+            recreateVertexArrays = true;
+        }
     }
 
     // We only need to update the cache with new glyphs if we are actually going to recreate the vertex arrays.
@@ -1580,6 +1582,7 @@ void QGL2PaintEngineExPrivate::drawCache
         }
 
         userData->glyphType = glyphType;
+        userData->cacheSerialNumber = cache->serialNumber();
 
         // Use cache if backend optimizations is turned on
         vertexCoordinates = &userData->vertexCoordinateArray;
--- a/src/opengl/gl2paintengineex/qtextureglyphcache_gl.cpp
+++ b/src/opengl/gl2paintengineex/qtextureglyphcache_gl.cpp
@@ -52,12 +52,15 @@ QT_BEGIN_NAMESPACE
 extern Q_GUI_EXPORT bool qt_cleartype_enabled;
 #endif
 
+QBasicAtomicInt qgltextureglyphcache_serial_number = Q_BASIC_ATOMIC_INITIALIZER(1);
+
 QGLTextureGlyphCache::QGLTextureGlyphCache(QGLContext *context, QFontEngineGlyphCache::Type type, const QTransform &matrix)
     : QImageTextureGlyphCache(type, matrix)
     , ctx(0)
     , m_width(0)
     , m_height(0)
     , m_filterMode(Nearest)
+    , m_serialNumber(qgltextureglyphcache_serial_number.fetchAndAddRelaxed(1))
 {
     setContext(context);
 }
--- a/src/opengl/gl2paintengineex/qtextureglyphcache_gl_p.h
+++ b/src/opengl/gl2paintengineex/qtextureglyphcache_gl_p.h
@@ -83,6 +83,8 @@ public:
 
     inline void setPaintEnginePrivate(QGL2PaintEngineExPrivate *p) { pex = p; }
 
+    inline int serialNumber() const { return m_serialNumber; }
+
     enum FilterMode {
         Nearest,
         Linear
@@ -140,6 +142,7 @@ private:
     QGLShaderProgram *m_program;
 
     FilterMode m_filterMode;
+    int m_serialNumber;
 };
 
 QT_END_NAMESPACE
